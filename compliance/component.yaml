schema_version: 3.0.0
name: EKIP
documentation_complete: false
references:
- name: New Relic Application Monitoring
  path: https://newrelic.com/application-monitoring
  type: URL
- name: Repository's Github
  path: https://github.com/18F/ekip-api
  type: URL
- name: User Provided Service Documentation
  path: https://docs.cloudfoundry.org/devguide/services/user-provided.html
  type: URL
- name: Flake8, Python Linting Tool
  path: http://flake8.pycqa.org/en/latest/
  type: URL
- name: OWASP's ZAP
  path: https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project
  type: URL
satisfies:
- standard_key: NIST-800-53
  control_key: AC-2   # Account Management
  narrative:
    - text: >
        Within our application (see cloud.gov for lower-level controls) user
        accounts are created for Administrative purposes, and usage statistics 
        monitoring. User Authentication is handled via a serverside session.
        Accounts are managed directly via administrative staff. Users do not have
        the ability to create their own accounts. Accounts must be created by Staff.
- standard_key: NIST-800-53
  control_key: AC-3   # Access Enforcement
  narrative:
    - text: >
        Access to usage information, and data entry is restricted to approved 
        accounts created directly by Administrative Staff. User Accounts have read 
        access to usage data, and write access to data entry of park pass usage/
        creation. 
- standard_key: NIST-800-53
  control_key: AC-6   # Least Privilege
  narrative:
    - text: >
        At the application level (see cloud.gov for lower-level controls), users
        are able to access aggregate statistics available via reporting tools. 
        User may upload pass usage information. Pass usage data is scrubbed, and 
        entered to a Postgres RDS service hosted by cloud.gov.  
  covered_by:
    - verification_key: aws-s3-url
- standard_key: NIST-800-53
  control_key: AU-2   # Audit Events
  narrative:
    - text: >
        Cloud.gov logs requests, failures, warnings, etc. emitted by the
        application. We also utilize New Relic, which registers Python-level
        exceptions and periods of down-time.
  covered_by:
    - verification_key: new-relic
- standard_key: NIST-800-53
  control_key: AU-6   # Audit Review, Analysis, and Reporting
  narrative:
    - text: >
        In addition to the low-level reporting provided by cloud.gov, New Relic
        sends email alerts to the team after repeated errors or down-time.
  covered_by:
    - verification_key: new-relic
- standard_key: NIST-800-53
  control_key: CA-8   # Penetration Testing
  narrative:
    - text: No controls on top of cloud.gov's
- standard_key: NIST-800-53
  control_key: CM-2   # Baseline Configuration
  narrative:
    - text: No controls on top of cloud.gov's
- standard_key: NIST-800-53
  control_key: CM-3   # Configuration Change Control
  narrative:
    - text: >
        In addition to cloud.gov controls, all code is reviewed on GitHub before
        being merged into the "master" branch. These changes are tested
        automatically via Coveralls CI (which runs unit, integration tests, and
        static analysis) as well as manual testing for visual regressions
        (though this is partially automated). Proposed changes have appropriate
        justification (describing problems resolved or referencing further
        details in an issue tracker) in either their commit history or as part
        of the Github Pull Request. Proposed changes which fail automated tests
        are generally not merged. Only the tested, "master" branch code is
        deployed, on an ad-hoc basis.
  references:
    - verification_key: github
    - verification_key: coveralls
- standard_key: NIST-800-53
  control_key: CM-6   # Configuration Settings
  narrative:
    - text: >
        As described in the README, configurable settings are defined in a
        handful of locations. Configurations which can be shared between
        cloud.gov environments are located in the manifest.yml,
        ekip/config/settings/base.py and production.py files. 
        Configurations which are specific to one cloud.gov environment (i.e. either the staging or
        production environment) are located in the appropriate manifest_*.yml
        file or stored in and provided by a cloud.gov "custom user provided
        service".
  references:
    - verification_key: cups
- standard_key: NIST-800-53
  control_key: CM-8   # Information System Component Inventory
  narrative:
    - text: >
        In addition to the controls provided by cloud.gov, the application
        tracks components through versioned library dependencies
        (requirements.txt), as well as a listing of relevant cloud.gov services
        (mentioned in the README)
- standard_key: NIST-800-53
  control_key: IA-2 (1)   # Identification and Authentication (Organizational
                          # Users)
                          # Network Access to Privileged Accounts
  narrative:
    - text: See cloud.gov controls.
- standard_key: NIST-800-53
  control_key: IA-2 (2)   # Identification and Authentication (Organizational
                          # Users)
                          # Network Access to Non-Privileged Accounts
  narrative:
    - text: See cloud.gov controls.
- standard_key: NIST-800-53
  control_key: IA-2 (12)  # Identification and Authentication (Organizational
                          # Users)
                          # Acceptance of PIV Credentials
  narrative:
    - text: See cloud.gov controls.
- standard_key: NIST-800-53
  control_key: RA-5   # Vulnerability Scanning
  narrative:
    - text: >
        In addition to cloud.gov controls, the application layer is scanned with
        both static and dynamic tooling.  Before being merged into "master", all
        custom code is automatically analyzed by "flake8" (a linting tool to
        catch syntactic errors), "bandit" (a security-focused static analysis
        tool), and a handful of custom, security-centric unit tests. Code which
        does not meet these standards is generally not merged. We also employ
        pip to track our dependencies, and Code Climate to warn of potentially
        concerning style. For static analysis, we've addressed all critical issues raised by
        evaluating the application with OWASP ZAP.
  references:
    - verification_key: flake8
    - verification_key: bandit
    - verification_key: pip
    - verification_key: code-climate
    - verification_key: owasp-zap
- standard_key: NIST-800-53
  control_key: SA-11 (1)   # Developer Security Testing and Evaluation
                           # Static Code Analysis
  narrative:
    - text: >
        In addition to cloud.gov controls, the application layer is scanned with
        static analysis tooling. Before being merged into "master" all custom
        code has "flake8" (a linting tool to catch syntactic errors), "bandit"
        (a security-focused static analysis tool), and a handful of custom,
        security-centric unit tests ran. Code which does not meet these
        standards is generally not merged. We also employ pip to track our
        dependencies, and Code Climate to warn of potentially concerning style.
  references:
    - verification_key: flake8
    - verification_key: bandit
    - verification_key: pip
    - verification_key: code-climate
- standard_key: NIST-800-53
  control_key: SA-22 (1)   # Unsupported System Components
                           # Alternative Sources for Continued Support
  narrative:
    - text: >
        At the application layer (see cloud.gov controls for lower), one
        selection criteria for libraries was their support status. Should a
        library fall in to an unsupported state, 18F has the capacity to
        maintain it in-house.
- standard_key: NIST-800-53
  control_key: SC-7   # Boundary Protection
  narrative:
    - text: See cloud.gov controls.
- standard_key: NIST-800-53
  control_key: SC-12 (1)  # Cryptographic Key Establishment and Management
                          # Availability
  narrative:
    - text: >
        At the application layer (see cloud.gov controls for lower), all keys
        are available to authorized users by querying cloud.gov's "services",
        including "custom user provided services".
- standard_key: NIST-800-53
  control_key: SC-13  # Cryptographic Protection
  narrative:
    - text: See cloud.gov controls, which ensure HTTPS throughout.
- standard_key: NIST-800-53
  control_key: SC-28 (1)  # Protection of Information at Rest
                          # Cryptographic Protection
  narrative:
    - text: See cloud.gov controls.
- standard_key: NIST-800-53
  control_key: SI-2   # Flaw Remediation
  narrative:
    - text: >
        At the application layer (see cloud.gov controls for lower), all custom
        code passes through a set of automated unit and integration tests via
        Coveralls CI. Library dependencies are verified up to date via PIP.
        Production errors are captured via New Relic and emailed to relevant
        parties. Further, code is first deployed (automatically) to our staging
        environment, where we may discover errors before appearing in
        production.
  references:
    - verification_key: coveralls
    - verification_key: new-relic
- standard_key: NIST-800-53
  control_key: SI-4   # Information System Monitoring
  narrative:
    - text: See cloud.gov controls.
- standard_key: NIST-800-53
  control_key: SI-10  # Information Input Validation
  narrative:
    - text: >
        At the application layer (see cloud.gov controls for lower), 
        we validate user Input by checking for valid strings, and scrub data 
        that is saved to the database layer.
verifications:
- key: coveralls
  name: Repository's Coveralls CI
  path: https://coveralls.io/github/18F/ekip-api
  type: URL
- key: code-climate
  name: Project's Code Climate Results
  path: https://codeclimate.com/github/18F/ekip-api
  type: URL